<!DOCTYPE html>
<html>

<head>
  <% include lib.ejs %>
    <title>
      <%- title%>
    </title>
</head>

<body class="dark:bg-gray-900">
  <% include nav-bar.ejs %>
    <br><br><br>
    <div id="view-all-app" class="px-8 py-4 w-full" style="height: 80vh;">
      <div class="w-full" v-if="dataSource?false:true">
        <h1 class="dark:text-gray-300">Đang tải dữ liệu...</h1>
      </div>
      <div class="w-full h-full overflow-auto" v-if="dataSource?true:false">
        <table class="w-full">
          <thead style="position: sticky; top: 0; z-index: 2;" class="bg-gray-100 dark:bg-gray-700">
            <tr>
              <th scope="col"
                class="py-2 px-4 text-xs font-medium text-left text-gray-700 uppercase dark:text-gray-400">
                Tiêu chí
              </th>
              <th scope="col" class="py-2 px-4 text-xs font-medium text-left text-gray-700 uppercase dark:text-gray-400"
                v-for="eval in evaluateColums" :key="eval.value">
                {{ eval.label }}
              </th>
            </tr>
          </thead>
          <tbody>
            <!-- Product 1 -->
            <tr class="bg-white border-b dark:bg-gray-800 dark:border-gray-700"
              v-for="(student, idRow) in listAllStudent" :key="student.id"
              :class="idRow % 2 ? 'bg-gray-50' : '  bg-white'">
              <td class="py-2 px-4 text-sm font-medium text-gray-900 whitespace-nowrap dark:text-white">
                {{ student.name }}
              </td>
              <td class="py-2 px-4 text-sm font-medium text-gray-900 whitespace-nowrap dark:text-white"
                v-for="(eval, idCol) in evaluateColums" :key="eval.value">
                <div>
                  {{ dataSource[idRow][idCol] }}
                </div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div><br><br><br><br>
    <% include footer.ejs %>
</body>
<% include scripts.ejs %>
  <script src="https://unpkg.com/flowbite@1.3.4/dist/flowbite.js"></script>

  <script>
    const API_PATH = "<%= process.env.API_PATH %>";
    const ALL_STUDENTS = <%- JSON.stringify(ALL_STUDENTS) %>;
    const ALL_WEEKS = <%- JSON.stringify(ALL_WEEKS) %>;
    const EVALUATE_COLUMNS =  <%- JSON.stringify(EVALUATE_COLUMNS) %>;
    var app = new Vue({
      el: "#view-all-app",
      data: {
        loading: false,
        error: null,
        success: null,
        listAllStudent: ALL_STUDENTS,
        listAllWeek: ALL_WEEKS,
        evaluateColums: [...EVALUATE_COLUMNS, {
          label: "Tổng",
          value: '17'
        }],
        formData: {
          studentId: null,
          week: null,
        },
        dataSource: null,

      },
      async created() {
        await this.handleGetAllDetail();
      },
      methods: {
        generateRequestHeader(customHeader = null) {
          return {
            headers: {
              'Content-Type': 'application/json',
              Authorization: 'Bearer ' + localStorage.getItem('token'),
            },
          }
        },
        async handleGetAllDetail() {
          try {
            var today = new Date();
            // đếm số tuần giữa 2 ngày
            function countWeeks(date1, date2) {
              var oneDay = 24 * 60 * 60 * 1000; // hours*minutes*seconds*milliseconds
              var firstDate = new Date(date1);
              var secondDate = new Date(date2);

              return Math.round(Math.abs((firstDate.getTime() - secondDate.getTime()) / (oneDay * 7)));
            }
            const reswek = countWeeks('2022-08-17', today);
            const res = await axios.get(API_PATH + 'get-all', null);
            let dataSource = [];
            ALL_STUDENTS.forEach(student => {
              let pushObject = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
              let studentPointArray = res.data.filter(point => Number(point.studentId) === Number(student.id));
              let total = 0;
              //console.log(studentPointArray);   
              studentPointArray?.forEach(eval => {
                eval.point.forEach((point, idPoint) => {
                  pushObject[idPoint] += point;

                  if ([0, 1, 2, 3].includes(idPoint)) {
                    total += point * 5;
                  };
                  if ([4, 5, 6, 7, 8].includes(idPoint)) {
                    total -= point * 10;
                  };
                  if ([9, 10, 11].includes(idPoint)) {
                    total -= point * 20;
                  };
                  if ([12].includes(idPoint)) {
                    total -= point * 10;
                  };
                  if ([13, 14].includes(idPoint)) {
                    total -= point * 50;
                  };
                  if ([15].includes(idPoint)) {
                    total -= point;
                  }
                })
              })
              total += reswek * 100;
              console.log(total);
              pushObject[pushObject.length - 1] = total;
              dataSource.push(pushObject);
            })
            this.dataSource = dataSource
          } catch (error) {
            this.dataSource = null;
          }
        }

      }
    });
  </script>

</html>